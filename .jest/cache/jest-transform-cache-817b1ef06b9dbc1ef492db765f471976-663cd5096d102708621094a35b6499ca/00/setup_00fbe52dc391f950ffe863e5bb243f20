3c1ca0dc2404ee903baa0f37c098c60b
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */
'use strict';

jest.mock('../Libraries/Core/InitializeCore', () => {}).mock('../Libraries/ReactNative/UIManager', () => ({
  AndroidViewPager: {
    Commands: {
      setPage: jest.fn(),
      setPageWithoutAnimation: jest.fn()
    }
  },
  blur: jest.fn(),
  createView: jest.fn(),
  customBubblingEventTypes: {},
  customDirectEventTypes: {},
  dispatchViewManagerCommand: jest.fn(),
  focus: jest.fn(),
  getViewManagerConfig: jest.fn(name => {
    if (name === 'AndroidDrawerLayout') {
      return {
        Constants: {
          DrawerPosition: {
            Left: 10
          }
        }
      };
    }
  }),
  measure: jest.fn(),
  manageChildren: jest.fn(),
  removeSubviewsFromContainerWithID: jest.fn(),
  replaceExistingNonRootView: jest.fn(),
  setChildren: jest.fn(),
  updateView: jest.fn(),
  AndroidDrawerLayout: {
    Constants: {
      DrawerPosition: {
        Left: 10
      }
    }
  },
  AndroidTextInput: {
    Commands: {}
  },
  ScrollView: {
    Constants: {}
  },
  View: {
    Constants: {}
  }
})).mock('../Libraries/Image/Image', () => mockComponent('../Libraries/Image/Image')).mock('../Libraries/Text/Text', () => mockComponent('../Libraries/Text/Text', MockNativeMethods)).mock('../Libraries/Components/TextInput/TextInput', () => mockComponent('../Libraries/Components/TextInput/TextInput')).mock('../Libraries/Modal/Modal', () => mockComponent('../Libraries/Modal/Modal')).mock('../Libraries/Components/View/View', () => mockComponent('../Libraries/Components/View/View', MockNativeMethods)).mock('../Libraries/Components/AccessibilityInfo/AccessibilityInfo', () => ({
  addEventListener: jest.fn(),
  announceForAccessibility: jest.fn(),
  fetch: jest.fn(),
  isBoldTextEnabled: jest.fn(),
  isGrayscaleEnabled: jest.fn(),
  isInvertColorsEnabled: jest.fn(),
  isReduceMotionEnabled: jest.fn(),
  isReduceTransparencyEnabled: jest.fn(),
  isScreenReaderEnabled: jest.fn(),
  removeEventListener: jest.fn(),
  setAccessibilityFocus: jest.fn()
})).mock('../Libraries/Components/RefreshControl/RefreshControl', () => jest.requireActual('../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock')).mock('../Libraries/Components/ScrollView/ScrollView', () => jest.requireActual('../Libraries/Components/ScrollView/__mocks__/ScrollViewMock')).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', () => mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator')).mock('../Libraries/Animated/src/Animated', () => {
  const Animated = jest.requireActual('../Libraries/Animated/src/Animated');
  Animated.Text.__skipSetNativeProps_FOR_TESTS_ONLY = true;
  Animated.View.__skipSetNativeProps_FOR_TESTS_ONLY = true;
  return Animated;
}).mock('../Libraries/Animated/src/AnimatedImplementation', () => {
  const AnimatedImplementation = jest.requireActual('../Libraries/Animated/src/AnimatedImplementation');
  const oldCreate = AnimatedImplementation.createAnimatedComponent;

  AnimatedImplementation.createAnimatedComponent = function (Component, defaultProps) {
    const Wrapped = oldCreate(Component, defaultProps);
    Wrapped.__skipSetNativeProps_FOR_TESTS_ONLY = true;
    return Wrapped;
  };

  return AnimatedImplementation;
}).mock('../Libraries/AppState/AppState', () => ({
  addEventListener: jest.fn(),
  removeEventListener: jest.fn()
})).mock('../Libraries/Linking/Linking', () => ({
  openURL: jest.fn(),
  canOpenURL: jest.fn(() => Promise.resolve(true)),
  openSettings: jest.fn(),
  addEventListener: jest.fn(),
  getInitialURL: jest.fn(() => Promise.resolve()),
  removeEventListener: jest.fn(),
  sendIntent: jest.fn()
})).mock('../Libraries/Renderer/shims/ReactNative', () => {
  const ReactNative = jest.requireActual('../Libraries/Renderer/shims/ReactNative');
  const NativeMethodsMixin = ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  Object.assign(NativeMethodsMixin, MockNativeMethods);
  Object.assign(ReactNative.NativeComponent.prototype, MockNativeMethods);
  return ReactNative;
}) // Mock modules defined by the native layer (ex: Objective-C, Java)
.mock('../Libraries/BatchedBridge/NativeModules', () => ({
  AlertManager: {
    alertWithArgs: jest.fn()
  },
  AsyncLocalStorage: {
    multiGet: jest.fn((keys, callback) => process.nextTick(() => callback(null, []))),
    multiSet: jest.fn((entries, callback) => process.nextTick(() => callback(null))),
    multiRemove: jest.fn((keys, callback) => process.nextTick(() => callback(null))),
    multiMerge: jest.fn((entries, callback) => process.nextTick(() => callback(null))),
    clear: jest.fn(callback => process.nextTick(() => callback(null))),
    getAllKeys: jest.fn(callback => process.nextTick(() => callback(null, [])))
  },
  Clipboard: {
    getString: jest.fn(() => ''),
    setString: jest.fn()
  },
  DeviceInfo: {
    getConstants() {
      return {
        Dimensions: {
          window: {
            fontScale: 2,
            height: 1334,
            scale: 2,
            width: 750
          },
          screen: {
            fontScale: 2,
            height: 1334,
            scale: 2,
            width: 750
          }
        }
      };
    }

  },
  ImageLoader: {
    getSize: jest.fn(url => Promise.resolve({
      width: 320,
      height: 240
    })),
    prefetchImage: jest.fn()
  },
  ImageViewManager: {
    getSize: jest.fn((uri, success) => process.nextTick(() => success(320, 240))),
    prefetchImage: jest.fn()
  },
  KeyboardObserver: {
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  Networking: {
    sendRequest: jest.fn(),
    abortRequest: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  PlatformConstants: {
    getConstants() {
      return {};
    }

  },
  PushNotificationManager: {
    presentLocalNotification: jest.fn(),
    scheduleLocalNotification: jest.fn(),
    cancelAllLocalNotifications: jest.fn(),
    removeAllDeliveredNotifications: jest.fn(),
    getDeliveredNotifications: jest.fn(callback => process.nextTick(() => [])),
    removeDeliveredNotifications: jest.fn(),
    setApplicationIconBadgeNumber: jest.fn(),
    getApplicationIconBadgeNumber: jest.fn(callback => process.nextTick(() => callback(0))),
    cancelLocalNotifications: jest.fn(),
    getScheduledLocalNotifications: jest.fn(callback => process.nextTick(() => callback())),
    requestPermissions: jest.fn(() => Promise.resolve({
      alert: true,
      badge: true,
      sound: true
    })),
    abandonPermissions: jest.fn(),
    checkPermissions: jest.fn(callback => process.nextTick(() => callback({
      alert: true,
      badge: true,
      sound: true
    }))),
    getInitialNotification: jest.fn(() => Promise.resolve(null)),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  SourceCode: {
    getConstants() {
      return {
        scriptURL: null
      };
    }

  },
  StatusBarManager: {
    setColor: jest.fn(),
    setStyle: jest.fn(),
    setHidden: jest.fn(),
    setNetworkActivityIndicatorVisible: jest.fn(),
    setBackgroundColor: jest.fn(),
    setTranslucent: jest.fn(),
    getConstants: () => ({
      HEIGHT: 42
    })
  },
  Timing: {
    createTimer: jest.fn(),
    deleteTimer: jest.fn()
  },
  UIManager: {},
  BlobModule: {
    getConstants: () => ({
      BLOB_URI_SCHEME: 'content',
      BLOB_URI_HOST: null
    }),
    addNetworkingHandler: jest.fn(),
    enableBlobSupport: jest.fn(),
    disableBlobSupport: jest.fn(),
    createFromParts: jest.fn(),
    sendBlob: jest.fn(),
    release: jest.fn()
  },
  WebSocketModule: {
    connect: jest.fn(),
    send: jest.fn(),
    sendBinary: jest.fn(),
    ping: jest.fn(),
    close: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  I18nManager: {
    allowRTL: jest.fn(),
    forceRTL: jest.fn(),
    swapLeftAndRightInRTL: jest.fn(),
    getConstants: () => ({
      isRTL: false,
      doLeftAndRightSwapInRTL: true
    })
  }
})).mock('../Libraries/ReactNative/requireNativeComponent', () => {
  const React = require('react');

  return viewName => {
    const Component = class extends React.Component {
      render() {
        return React.createElement(viewName, this.props, this.props.children);
      }

    };

    if (viewName === 'RCTView') {
      Component.displayName = 'View';
    } else {
      Component.displayName = viewName;
    }

    return Component;
  };
}).mock('../Libraries/Utilities/verifyComponentAttributeEquivalence', () => function () {}).mock('../Libraries/Components/View/ViewNativeComponent', () => {
  const React = require('react');

  const Component = class extends React.Component {
    render() {
      return React.createElement('View', this.props, this.props.children);
    }

  };
  Component.displayName = 'View';
  return {
    __esModule: true,
    default: Component
  };
});
const MockNativeMethods = jest.requireActual('./MockNativeMethods');
const mockComponent = jest.requireActual('./mockComponent');
jest.requireActual('../Libraries/polyfills/Object.es7.js');
jest.requireActual('../Libraries/polyfills/error-guard');
global.__DEV__ = true;
global.Promise = jest.requireActual('promise');
global.regeneratorRuntime = jest.requireActual('regenerator-runtime/runtime');

global.requestAnimationFrame = function (callback) {
  return setTimeout(callback, 0);
};

global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
}; // there's a __mock__ for it.


jest.setMock('../Libraries/vendor/core/ErrorUtils', require('../Libraries/vendor/core/ErrorUtils'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiQW5kcm9pZFZpZXdQYWdlciIsIkNvbW1hbmRzIiwic2V0UGFnZSIsImZuIiwic2V0UGFnZVdpdGhvdXRBbmltYXRpb24iLCJibHVyIiwiY3JlYXRlVmlldyIsImN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcyIsImN1c3RvbURpcmVjdEV2ZW50VHlwZXMiLCJkaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZCIsImZvY3VzIiwiZ2V0Vmlld01hbmFnZXJDb25maWciLCJuYW1lIiwiQ29uc3RhbnRzIiwiRHJhd2VyUG9zaXRpb24iLCJMZWZ0IiwibWVhc3VyZSIsIm1hbmFnZUNoaWxkcmVuIiwicmVtb3ZlU3Vidmlld3NGcm9tQ29udGFpbmVyV2l0aElEIiwicmVwbGFjZUV4aXN0aW5nTm9uUm9vdFZpZXciLCJzZXRDaGlsZHJlbiIsInVwZGF0ZVZpZXciLCJBbmRyb2lkRHJhd2VyTGF5b3V0IiwiQW5kcm9pZFRleHRJbnB1dCIsIlNjcm9sbFZpZXciLCJWaWV3IiwibW9ja0NvbXBvbmVudCIsIk1vY2tOYXRpdmVNZXRob2RzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFubm91bmNlRm9yQWNjZXNzaWJpbGl0eSIsImZldGNoIiwiaXNCb2xkVGV4dEVuYWJsZWQiLCJpc0dyYXlzY2FsZUVuYWJsZWQiLCJpc0ludmVydENvbG9yc0VuYWJsZWQiLCJpc1JlZHVjZU1vdGlvbkVuYWJsZWQiLCJpc1JlZHVjZVRyYW5zcGFyZW5jeUVuYWJsZWQiLCJpc1NjcmVlblJlYWRlckVuYWJsZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0QWNjZXNzaWJpbGl0eUZvY3VzIiwicmVxdWlyZUFjdHVhbCIsIkFuaW1hdGVkIiwiVGV4dCIsIl9fc2tpcFNldE5hdGl2ZVByb3BzX0ZPUl9URVNUU19PTkxZIiwiQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiIsIm9sZENyZWF0ZSIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwiV3JhcHBlZCIsIm9wZW5VUkwiLCJjYW5PcGVuVVJMIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvcGVuU2V0dGluZ3MiLCJnZXRJbml0aWFsVVJMIiwic2VuZEludGVudCIsIlJlYWN0TmF0aXZlIiwiTmF0aXZlTWV0aG9kc01peGluIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJPYmplY3QiLCJhc3NpZ24iLCJOYXRpdmVDb21wb25lbnQiLCJwcm90b3R5cGUiLCJBbGVydE1hbmFnZXIiLCJhbGVydFdpdGhBcmdzIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJtdWx0aUdldCIsImtleXMiLCJjYWxsYmFjayIsInByb2Nlc3MiLCJuZXh0VGljayIsIm11bHRpU2V0IiwiZW50cmllcyIsIm11bHRpUmVtb3ZlIiwibXVsdGlNZXJnZSIsImNsZWFyIiwiZ2V0QWxsS2V5cyIsIkNsaXBib2FyZCIsImdldFN0cmluZyIsInNldFN0cmluZyIsIkRldmljZUluZm8iLCJnZXRDb25zdGFudHMiLCJEaW1lbnNpb25zIiwid2luZG93IiwiZm9udFNjYWxlIiwiaGVpZ2h0Iiwic2NhbGUiLCJ3aWR0aCIsInNjcmVlbiIsIkltYWdlTG9hZGVyIiwiZ2V0U2l6ZSIsInVybCIsInByZWZldGNoSW1hZ2UiLCJJbWFnZVZpZXdNYW5hZ2VyIiwidXJpIiwic3VjY2VzcyIsIktleWJvYXJkT2JzZXJ2ZXIiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVycyIsIk5ldHdvcmtpbmciLCJzZW5kUmVxdWVzdCIsImFib3J0UmVxdWVzdCIsIlBsYXRmb3JtQ29uc3RhbnRzIiwiUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXIiLCJwcmVzZW50TG9jYWxOb3RpZmljYXRpb24iLCJzY2hlZHVsZUxvY2FsTm90aWZpY2F0aW9uIiwiY2FuY2VsQWxsTG9jYWxOb3RpZmljYXRpb25zIiwicmVtb3ZlQWxsRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsImdldERlbGl2ZXJlZE5vdGlmaWNhdGlvbnMiLCJyZW1vdmVEZWxpdmVyZWROb3RpZmljYXRpb25zIiwic2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXIiLCJnZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlciIsImNhbmNlbExvY2FsTm90aWZpY2F0aW9ucyIsImdldFNjaGVkdWxlZExvY2FsTm90aWZpY2F0aW9ucyIsInJlcXVlc3RQZXJtaXNzaW9ucyIsImFsZXJ0IiwiYmFkZ2UiLCJzb3VuZCIsImFiYW5kb25QZXJtaXNzaW9ucyIsImNoZWNrUGVybWlzc2lvbnMiLCJnZXRJbml0aWFsTm90aWZpY2F0aW9uIiwiU291cmNlQ29kZSIsInNjcmlwdFVSTCIsIlN0YXR1c0Jhck1hbmFnZXIiLCJzZXRDb2xvciIsInNldFN0eWxlIiwic2V0SGlkZGVuIiwic2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZSIsInNldEJhY2tncm91bmRDb2xvciIsInNldFRyYW5zbHVjZW50IiwiSEVJR0hUIiwiVGltaW5nIiwiY3JlYXRlVGltZXIiLCJkZWxldGVUaW1lciIsIlVJTWFuYWdlciIsIkJsb2JNb2R1bGUiLCJCTE9CX1VSSV9TQ0hFTUUiLCJCTE9CX1VSSV9IT1NUIiwiYWRkTmV0d29ya2luZ0hhbmRsZXIiLCJlbmFibGVCbG9iU3VwcG9ydCIsImRpc2FibGVCbG9iU3VwcG9ydCIsImNyZWF0ZUZyb21QYXJ0cyIsInNlbmRCbG9iIiwicmVsZWFzZSIsIldlYlNvY2tldE1vZHVsZSIsImNvbm5lY3QiLCJzZW5kIiwic2VuZEJpbmFyeSIsInBpbmciLCJjbG9zZSIsIkkxOG5NYW5hZ2VyIiwiYWxsb3dSVEwiLCJmb3JjZVJUTCIsInN3YXBMZWZ0QW5kUmlnaHRJblJUTCIsImlzUlRMIiwiZG9MZWZ0QW5kUmlnaHRTd2FwSW5SVEwiLCJSZWFjdCIsInJlcXVpcmUiLCJ2aWV3TmFtZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJwcm9wcyIsImNoaWxkcmVuIiwiZGlzcGxheU5hbWUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImdsb2JhbCIsIl9fREVWX18iLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImNsZWFyVGltZW91dCIsInNldE1vY2siXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVNBOztBQTBCQUEsSUFBSSxDQUNEQyxJQURILENBQ1Esa0NBRFIsRUFDNEMsTUFBTSxDQUFFLENBRHBELEVBRUdBLElBRkgsQ0FFUSxvQ0FGUixFQUU4QyxPQUFPO0FBQ2pEQyxFQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkMsSUFBQUEsUUFBUSxFQUFFO0FBQ1JDLE1BQUFBLE9BQU8sRUFBRUosSUFBSSxDQUFDSyxFQUFMLEVBREQ7QUFFUkMsTUFBQUEsdUJBQXVCLEVBQUVOLElBQUksQ0FBQ0ssRUFBTDtBQUZqQjtBQURNLEdBRCtCO0FBT2pERSxFQUFBQSxJQUFJLEVBQUVQLElBQUksQ0FBQ0ssRUFBTCxFQVAyQztBQVFqREcsRUFBQUEsVUFBVSxFQUFFUixJQUFJLENBQUNLLEVBQUwsRUFScUM7QUFTakRJLEVBQUFBLHdCQUF3QixFQUFFLEVBVHVCO0FBVWpEQyxFQUFBQSxzQkFBc0IsRUFBRSxFQVZ5QjtBQVdqREMsRUFBQUEsMEJBQTBCLEVBQUVYLElBQUksQ0FBQ0ssRUFBTCxFQVhxQjtBQVlqRE8sRUFBQUEsS0FBSyxFQUFFWixJQUFJLENBQUNLLEVBQUwsRUFaMEM7QUFhakRRLEVBQUFBLG9CQUFvQixFQUFFYixJQUFJLENBQUNLLEVBQUwsQ0FBUVMsSUFBSSxJQUFJO0FBQ3BDLFFBQUlBLElBQUksS0FBSyxxQkFBYixFQUFvQztBQUNsQyxhQUFPO0FBQ0xDLFFBQUFBLFNBQVMsRUFBRTtBQUNUQyxVQUFBQSxjQUFjLEVBQUU7QUFDZEMsWUFBQUEsSUFBSSxFQUFFO0FBRFE7QUFEUDtBQUROLE9BQVA7QUFPRDtBQUNGLEdBVnFCLENBYjJCO0FBd0JqREMsRUFBQUEsT0FBTyxF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QUFDQStILE1BQU0sQ0FBQ0Usa0JBQVAsR0FBNEIxSyxJQUFJLENBQUN5QyxhQUFMLENBQW1CLDZCQUFuQixDQUE1Qjs7QUFFQStILE1BQU0sQ0FBQ0cscUJBQVAsR0FBK0IsVUFBU3JHLFFBQVQsRUFBbUI7QUFDaEQsU0FBT3NHLFVBQVUsQ0FBQ3RHLFFBQUQsRUFBVyxDQUFYLENBQWpCO0FBQ0QsQ0FGRDs7QUFHQWtHLE1BQU0sQ0FBQ0ssb0JBQVAsR0FBOEIsVUFBU0MsRUFBVCxFQUFhO0FBQ3pDQyxFQUFBQSxZQUFZLENBQUNELEVBQUQsQ0FBWjtBQUNELENBRkQsQyxDQUlBOzs7QUFDQTlLLElBQUksQ0FBQ2dMLE9BQUwsQ0FDRSxxQ0FERixFQUVFakIsT0FBTyxDQUFDLHFDQUFELENBRlQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vY2tOYXRpdmVNZXRob2RzID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuL01vY2tOYXRpdmVNZXRob2RzJyk7XG5jb25zdCBtb2NrQ29tcG9uZW50ID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuL21vY2tDb21wb25lbnQnKTtcblxuamVzdC5yZXF1aXJlQWN0dWFsKCcuLi9MaWJyYXJpZXMvcG9seWZpbGxzL09iamVjdC5lczcuanMnKTtcbmplc3QucmVxdWlyZUFjdHVhbCgnLi4vTGlicmFyaWVzL3BvbHlmaWxscy9lcnJvci1ndWFyZCcpO1xuXG5nbG9iYWwuX19ERVZfXyA9IHRydWU7XG5cbmdsb2JhbC5Qcm9taXNlID0gamVzdC5yZXF1aXJlQWN0dWFsKCdwcm9taXNlJyk7XG5nbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUnKTtcblxuZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbn07XG5nbG9iYWwuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihpZCkge1xuICBjbGVhclRpbWVvdXQoaWQpO1xufTtcblxuLy8gdGhlcmUncyBhIF9fbW9ja19fIGZvciBpdC5cbmplc3Quc2V0TW9jayhcbiAgJy4uL0xpYnJhcmllcy92ZW5kb3IvY29yZS9FcnJvclV0aWxzJyxcbiAgcmVxdWlyZSgnLi4vTGlicmFyaWVzL3ZlbmRvci9jb3JlL0Vycm9yVXRpbHMnKSxcbik7XG5cbmplc3RcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db3JlL0luaXRpYWxpemVDb3JlJywgKCkgPT4ge30pXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJywgKCkgPT4gKHtcbiAgICBBbmRyb2lkVmlld1BhZ2VyOiB7XG4gICAgICBDb21tYW5kczoge1xuICAgICAgICBzZXRQYWdlOiBqZXN0LmZuKCksXG4gICAgICAgIHNldFBhZ2VXaXRob3V0QW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgICB9LFxuICAgIH0sXG4gICAgYmx1cjogamVzdC5mbigpLFxuICAgIGNyZWF0ZVZpZXc6IGplc3QuZm4oKSxcbiAgICBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXM6IHt9LFxuICAgIGN1c3RvbURpcmVjdEV2ZW50VHlwZXM6IHt9LFxuICAgIGRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kOiBqZXN0LmZuKCksXG4gICAgZm9jdXM6IGplc3QuZm4oKSxcbiAgICBnZXRWaWV3TWFuYWdlckNvbmZpZzogamVzdC5mbihuYW1lID0+IHtcbiAgICAgIGlmIChuYW1lID09PSAnQW5kcm9pZERyYXdlckxheW91dCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBDb25zdGFudHM6IHtcbiAgICAgICAgICAgIERyYXdlclBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgIExlZnQ6IDEwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pLFxuICAgIG1lYXN1cmU6IGplc3QuZm4oKSxcbiAgICBtYW5hZ2VDaGlsZHJlbjogamVzdC5mbigpLFxuICAgIHJlbW92ZVN1YnZpZXdzRnJvbUNvbnRhaW5lcldpdGhJRDogamVzdC5mbigpLFxuICAgIHJlcGxhY2VFeGlzdGluZ05vblJvb3RWaWV3OiBqZXN0LmZuKCksXG4gICAgc2V0Q2hpbGRyZW46IGplc3QuZm4oKSxcbiAgICB1cGRhdGVWaWV3OiBqZXN0LmZuKCksXG4gICAgQW5kcm9pZERyYXdlckxheW91dDoge1xuICAgICAgQ29uc3RhbnRzOiB7XG4gICAgICAgIERyYXdlclBvc2l0aW9uOiB7XG4gICAgICAgICAgTGVmdDogMTAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgQW5kcm9pZFRleHRJbnB1dDoge1xuICAgICAgQ29tbWFuZHM6IHt9LFxuICAgIH0sXG4gICAgU2Nyb2xsVmlldzoge1xuICAgICAgQ29uc3RhbnRzOiB7fSxcbiAgICB9LFxuICAgIFZpZXc6IHtcbiAgICAgIENvbnN0YW50czoge30sXG4gICAgfSxcbiAgfSkpXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2UnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9JbWFnZS9JbWFnZScpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvVGV4dC9UZXh0JywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvVGV4dC9UZXh0JywgTW9ja05hdGl2ZU1ldGhvZHMpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0JywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0JyksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Nb2RhbC9Nb2RhbCcsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudCgnLi4vTGlicmFyaWVzL01vZGFsL01vZGFsJyksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldycsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudCgnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3JywgTW9ja05hdGl2ZU1ldGhvZHMpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY2Nlc3NpYmlsaXR5SW5mby9BY2Nlc3NpYmlsaXR5SW5mbycsICgpID0+ICh7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIGFubm91bmNlRm9yQWNjZXNzaWJpbGl0eTogamVzdC5mbigpLFxuICAgIGZldGNoOiBqZXN0LmZuKCksXG4gICAgaXNCb2xkVGV4dEVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc0dyYXlzY2FsZUVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc0ludmVydENvbG9yc0VuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc1JlZHVjZU1vdGlvbkVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc1JlZHVjZVRyYW5zcGFyZW5jeUVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc1NjcmVlblJlYWRlckVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgc2V0QWNjZXNzaWJpbGl0eUZvY3VzOiBqZXN0LmZuKCksXG4gIH0pKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvUmVmcmVzaENvbnRyb2wnLCAoKSA9PlxuICAgIGplc3QucmVxdWlyZUFjdHVhbChcbiAgICAgICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9SZWZyZXNoQ29udHJvbC9fX21vY2tzX18vUmVmcmVzaENvbnRyb2xNb2NrJyxcbiAgICApLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnLCAoKSA9PlxuICAgIGplc3QucmVxdWlyZUFjdHVhbChcbiAgICAgICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L19fbW9ja3NfXy9TY3JvbGxWaWV3TW9jaycsXG4gICAgKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoXG4gICAgICAnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InLFxuICAgICksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9BbmltYXRlZC9zcmMvQW5pbWF0ZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgQW5pbWF0ZWQgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4uL0xpYnJhcmllcy9BbmltYXRlZC9zcmMvQW5pbWF0ZWQnKTtcbiAgICBBbmltYXRlZC5UZXh0Ll9fc2tpcFNldE5hdGl2ZVByb3BzX0ZPUl9URVNUU19PTkxZID0gdHJ1ZTtcbiAgICBBbmltYXRlZC5WaWV3Ll9fc2tpcFNldE5hdGl2ZVByb3BzX0ZPUl9URVNUU19PTkxZID0gdHJ1ZTtcbiAgICByZXR1cm4gQW5pbWF0ZWQ7XG4gIH0pXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQW5pbWF0ZWQvc3JjL0FuaW1hdGVkSW1wbGVtZW50YXRpb24nLCAoKSA9PiB7XG4gICAgY29uc3QgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiA9IGplc3QucmVxdWlyZUFjdHVhbChcbiAgICAgICcuLi9MaWJyYXJpZXMvQW5pbWF0ZWQvc3JjL0FuaW1hdGVkSW1wbGVtZW50YXRpb24nLFxuICAgICk7XG4gICAgY29uc3Qgb2xkQ3JlYXRlID0gQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5jcmVhdGVBbmltYXRlZENvbXBvbmVudDtcbiAgICBBbmltYXRlZEltcGxlbWVudGF0aW9uLmNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50ID0gZnVuY3Rpb24oXG4gICAgICBDb21wb25lbnQsXG4gICAgICBkZWZhdWx0UHJvcHMsXG4gICAgKSB7XG4gICAgICBjb25zdCBXcmFwcGVkID0gb2xkQ3JlYXRlKENvbXBvbmVudCwgZGVmYXVsdFByb3BzKTtcbiAgICAgIFdyYXBwZWQuX19za2lwU2V0TmF0aXZlUHJvcHNfRk9SX1RFU1RTX09OTFkgPSB0cnVlO1xuICAgICAgcmV0dXJuIFdyYXBwZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbjtcbiAgfSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9BcHBTdGF0ZS9BcHBTdGF0ZScsICgpID0+ICh7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgfSkpXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvTGlua2luZy9MaW5raW5nJywgKCkgPT4gKHtcbiAgICBvcGVuVVJMOiBqZXN0LmZuKCksXG4gICAgY2FuT3BlblVSTDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUodHJ1ZSkpLFxuICAgIG9wZW5TZXR0aW5nczogamVzdC5mbigpLFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBnZXRJbml0aWFsVVJMOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgc2VuZEludGVudDogamVzdC5mbigpLFxuICB9KSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScsICgpID0+IHtcbiAgICBjb25zdCBSZWFjdE5hdGl2ZSA9IGplc3QucmVxdWlyZUFjdHVhbChcbiAgICAgICcuLi9MaWJyYXJpZXMvUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnLFxuICAgICk7XG4gICAgY29uc3QgTmF0aXZlTWV0aG9kc01peGluID1cbiAgICAgIFJlYWN0TmF0aXZlLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEXG4gICAgICAgIC5OYXRpdmVNZXRob2RzTWl4aW47XG5cbiAgICBPYmplY3QuYXNzaWduKE5hdGl2ZU1ldGhvZHNNaXhpbiwgTW9ja05hdGl2ZU1ldGhvZHMpO1xuICAgIE9iamVjdC5hc3NpZ24oUmVhY3ROYXRpdmUuTmF0aXZlQ29tcG9uZW50LnByb3RvdHlwZSwgTW9ja05hdGl2ZU1ldGhvZHMpO1xuXG4gICAgcmV0dXJuIFJlYWN0TmF0aXZlO1xuICB9KVxuICAvLyBNb2NrIG1vZHVsZXMgZGVmaW5lZCBieSB0aGUgbmF0aXZlIGxheWVyIChleDogT2JqZWN0aXZlLUMsIEphdmEpXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQmF0Y2hlZEJyaWRnZS9OYXRpdmVNb2R1bGVzJywgKCkgPT4gKHtcbiAgICBBbGVydE1hbmFnZXI6IHtcbiAgICAgIGFsZXJ0V2l0aEFyZ3M6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIEFzeW5jTG9jYWxTdG9yYWdlOiB7XG4gICAgICBtdWx0aUdldDogamVzdC5mbigoa2V5cywgY2FsbGJhY2spID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCwgW10pKSxcbiAgICAgICksXG4gICAgICBtdWx0aVNldDogamVzdC5mbigoZW50cmllcywgY2FsbGJhY2spID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpLFxuICAgICAgKSxcbiAgICAgIG11bHRpUmVtb3ZlOiBqZXN0LmZuKChrZXlzLCBjYWxsYmFjaykgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSksXG4gICAgICApLFxuICAgICAgbXVsdGlNZXJnZTogamVzdC5mbigoZW50cmllcywgY2FsbGJhY2spID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpLFxuICAgICAgKSxcbiAgICAgIGNsZWFyOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpKSxcbiAgICAgIGdldEFsbEtleXM6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsLCBbXSkpLFxuICAgICAgKSxcbiAgICB9LFxuICAgIENsaXBib2FyZDoge1xuICAgICAgZ2V0U3RyaW5nOiBqZXN0LmZuKCgpID0+ICcnKSxcbiAgICAgIHNldFN0cmluZzogamVzdC5mbigpLFxuICAgIH0sXG4gICAgRGV2aWNlSW5mbzoge1xuICAgICAgZ2V0Q29uc3RhbnRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIERpbWVuc2lvbnM6IHtcbiAgICAgICAgICAgIHdpbmRvdzoge1xuICAgICAgICAgICAgICBmb250U2NhbGU6IDIsXG4gICAgICAgICAgICAgIGhlaWdodDogMTMzNCxcbiAgICAgICAgICAgICAgc2NhbGU6IDIsXG4gICAgICAgICAgICAgIHdpZHRoOiA3NTAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NyZWVuOiB7XG4gICAgICAgICAgICAgIGZvbnRTY2FsZTogMixcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMzM0LFxuICAgICAgICAgICAgICBzY2FsZTogMixcbiAgICAgICAgICAgICAgd2lkdGg6IDc1MCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBJbWFnZUxvYWRlcjoge1xuICAgICAgZ2V0U2l6ZTogamVzdC5mbih1cmwgPT4gUHJvbWlzZS5yZXNvbHZlKHt3aWR0aDogMzIwLCBoZWlnaHQ6IDI0MH0pKSxcbiAgICAgIHByZWZldGNoSW1hZ2U6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIEltYWdlVmlld01hbmFnZXI6IHtcbiAgICAgIGdldFNpemU6IGplc3QuZm4oKHVyaSwgc3VjY2VzcykgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBzdWNjZXNzKDMyMCwgMjQwKSksXG4gICAgICApLFxuICAgICAgcHJlZmV0Y2hJbWFnZTogamVzdC5mbigpLFxuICAgIH0sXG4gICAgS2V5Ym9hcmRPYnNlcnZlcjoge1xuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICAgIH0sXG4gICAgTmV0d29ya2luZzoge1xuICAgICAgc2VuZFJlcXVlc3Q6IGplc3QuZm4oKSxcbiAgICAgIGFib3J0UmVxdWVzdDogamVzdC5mbigpLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICAgIH0sXG4gICAgUGxhdGZvcm1Db25zdGFudHM6IHtcbiAgICAgIGdldENvbnN0YW50cygpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSxcbiAgICB9LFxuICAgIFB1c2hOb3RpZmljYXRpb25NYW5hZ2VyOiB7XG4gICAgICBwcmVzZW50TG9jYWxOb3RpZmljYXRpb246IGplc3QuZm4oKSxcbiAgICAgIHNjaGVkdWxlTG9jYWxOb3RpZmljYXRpb246IGplc3QuZm4oKSxcbiAgICAgIGNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlQWxsRGVsaXZlcmVkTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgICAgZ2V0RGVsaXZlcmVkTm90aWZpY2F0aW9uczogamVzdC5mbihjYWxsYmFjayA9PlxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IFtdKSxcbiAgICAgICksXG4gICAgICByZW1vdmVEZWxpdmVyZWROb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgICBzZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcjogamVzdC5mbigpLFxuICAgICAgZ2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXI6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjaygwKSksXG4gICAgICApLFxuICAgICAgY2FuY2VsTG9jYWxOb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgICBnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjaygpKSxcbiAgICAgICksXG4gICAgICByZXF1ZXN0UGVybWlzc2lvbnM6IGplc3QuZm4oKCkgPT5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHthbGVydDogdHJ1ZSwgYmFkZ2U6IHRydWUsIHNvdW5kOiB0cnVlfSksXG4gICAgICApLFxuICAgICAgYWJhbmRvblBlcm1pc3Npb25zOiBqZXN0LmZuKCksXG4gICAgICBjaGVja1Blcm1pc3Npb25zOiBqZXN0LmZuKGNhbGxiYWNrID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT5cbiAgICAgICAgICBjYWxsYmFjayh7YWxlcnQ6IHRydWUsIGJhZGdlOiB0cnVlLCBzb3VuZDogdHJ1ZX0pLFxuICAgICAgICApLFxuICAgICAgKSxcbiAgICAgIGdldEluaXRpYWxOb3RpZmljYXRpb246IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIFNvdXJjZUNvZGU6IHtcbiAgICAgIGdldENvbnN0YW50cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzY3JpcHRVUkw6IG51bGwsXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0sXG4gICAgU3RhdHVzQmFyTWFuYWdlcjoge1xuICAgICAgc2V0Q29sb3I6IGplc3QuZm4oKSxcbiAgICAgIHNldFN0eWxlOiBqZXN0LmZuKCksXG4gICAgICBzZXRIaWRkZW46IGplc3QuZm4oKSxcbiAgICAgIHNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGU6IGplc3QuZm4oKSxcbiAgICAgIHNldEJhY2tncm91bmRDb2xvcjogamVzdC5mbigpLFxuICAgICAgc2V0VHJhbnNsdWNlbnQ6IGplc3QuZm4oKSxcbiAgICAgIGdldENvbnN0YW50czogKCkgPT4gKHtcbiAgICAgICAgSEVJR0hUOiA0MixcbiAgICAgIH0pLFxuICAgIH0sXG4gICAgVGltaW5nOiB7XG4gICAgICBjcmVhdGVUaW1lcjogamVzdC5mbigpLFxuICAgICAgZGVsZXRlVGltZXI6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIFVJTWFuYWdlcjoge30sXG4gICAgQmxvYk1vZHVsZToge1xuICAgICAgZ2V0Q29uc3RhbnRzOiAoKSA9PiAoe0JMT0JfVVJJX1NDSEVNRTogJ2NvbnRlbnQnLCBCTE9CX1VSSV9IT1NUOiBudWxsfSksXG4gICAgICBhZGROZXR3b3JraW5nSGFuZGxlcjogamVzdC5mbigpLFxuICAgICAgZW5hYmxlQmxvYlN1cHBvcnQ6IGplc3QuZm4oKSxcbiAgICAgIGRpc2FibGVCbG9iU3VwcG9ydDogamVzdC5mbigpLFxuICAgICAgY3JlYXRlRnJvbVBhcnRzOiBqZXN0LmZuKCksXG4gICAgICBzZW5kQmxvYjogamVzdC5mbigpLFxuICAgICAgcmVsZWFzZTogamVzdC5mbigpLFxuICAgIH0sXG4gICAgV2ViU29ja2V0TW9kdWxlOiB7XG4gICAgICBjb25uZWN0OiBqZXN0LmZuKCksXG4gICAgICBzZW5kOiBqZXN0LmZuKCksXG4gICAgICBzZW5kQmluYXJ5OiBqZXN0LmZuKCksXG4gICAgICBwaW5nOiBqZXN0LmZuKCksXG4gICAgICBjbG9zZTogamVzdC5mbigpLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICAgIH0sXG4gICAgSTE4bk1hbmFnZXI6IHtcbiAgICAgIGFsbG93UlRMOiBqZXN0LmZuKCksXG4gICAgICBmb3JjZVJUTDogamVzdC5mbigpLFxuICAgICAgc3dhcExlZnRBbmRSaWdodEluUlRMOiBqZXN0LmZuKCksXG4gICAgICBnZXRDb25zdGFudHM6ICgpID0+ICh7XG4gICAgICAgIGlzUlRMOiBmYWxzZSxcbiAgICAgICAgZG9MZWZ0QW5kUmlnaHRTd2FwSW5SVEw6IHRydWUsXG4gICAgICB9KSxcbiAgICB9LFxuICB9KSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9yZXF1aXJlTmF0aXZlQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICAgIHJldHVybiB2aWV3TmFtZSA9PiB7XG4gICAgICBjb25zdCBDb21wb25lbnQgPSBjbGFzcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh2aWV3TmFtZSwgdGhpcy5wcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh2aWV3TmFtZSA9PT0gJ1JDVFZpZXcnKSB7XG4gICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdWaWV3JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IHZpZXdOYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgIH07XG4gIH0pXG4gIC5tb2NrKFxuICAgICcuLi9MaWJyYXJpZXMvVXRpbGl0aWVzL3ZlcmlmeUNvbXBvbmVudEF0dHJpYnV0ZUVxdWl2YWxlbmNlJyxcbiAgICAoKSA9PiBmdW5jdGlvbigpIHt9LFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXdOYXRpdmVDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGNsYXNzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ1ZpZXcnLCB0aGlzLnByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1ZpZXcnO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgICBkZWZhdWx0OiBDb21wb25lbnQsXG4gICAgfTtcbiAgfSk7XG4iXX0=